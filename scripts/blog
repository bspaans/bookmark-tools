#!/usr/bin/env python

import os
import os.path as path
import pipes
import sys
import re
import subprocess
import btools.common as common

name="blog"
description="Command line blog tool"
usage=["COMMAND [ARGUMENTS]"]
commands=[(["-h", "--help"], "", "Help screen"),
          (["add"], "FILES", "Adds files to the weblog index"),
          (["config"], "(list [VARIABLE]|set VARIABLE VALUE|unset VARIABLE)",
           "Resp. lists, sets and unsets configuration variables."),
          (["init"], "", "Initialize a new blog in the current directory"),
          (["remove", "rm"], "OBJECTS", "Remove objects from the weblog index. Does not remove the file itself."),
         ]
examples = []


def blog_location():
    return path.join(path.realpath("."), ".blog")

def existing_blog_location():
    loc = blog_location()
    if path.exists(loc):
        return loc
    common.error("Not in a weblog directory. Use `blog init` to start one.")

def conf_location(blogloc):
    return path.join(blogloc, "config")

def get_index_location(blogloc):
    return path.join(blogloc, "index")

def get_index(blogloc):
    loc = get_index_location(blogloc)
    f = open(loc, "r")
    res1 = {}
    res2 = {}
    for x in f.read().splitlines():
        path, obj = x.split()
        res1[obj] = path
        res2[path] = obj
    return res1, res2

def get_object_ids(blogloc):
    obj = os.listdir(path.join(blogloc, "objects"))
    return sorted([ int(x) for x in obj ])

def new_object_id(blogloc):
    obj = get_object_ids(blogloc)
    return 1 if obj == [] else max(obj) + 1
 
def get_object_id(object, loc):
    if str.isdigit(object):
        return get_object_id_by_possible_invalid_id(int(object), loc)
    else:
        return get_object_id_by_file(object, loc)

def get_object_id_by_possible_invalid_id(id, loc):
    if not id in get_object_ids(loc):
        return -1
    return id

def get_object_id_by_file(file, loc):
    file = path.realpath(file)
    ids, files = get_index(loc)
    if not files.has_key(file):
        return -1
    return files[file]

def execute_hook(blogloc, hook, env = {}):
    hook = path.join(blogloc, "hooks", hook)

    if not path.exists(hook):
        common.warning("Hook '%s' does not exist" % hook)
        return

    if ((os.stat(hook).st_mode & 0777) & 0100) == 64:
        common.debug("Executing hook %s." % hook)
        return subprocess.Popen(hook, shell=True).wait()
    else:
        common.debug("Ignoring hook %s. Not executable." % hook)



def remove_object(object, loc):
    id = get_object_id(object, loc)
    if id < 0:
        common.error("Cannot remove '%s'. Not a valid object" % object)

    common.debug("Removing files")
    os.remove( path.join(loc, "meta", str(id)))
    os.remove( path.join(loc, "objects", str(id)))

    common.debug("Rewriting index")
    ids, paths = get_index(loc)
    f = open( get_index_location(loc), "w")
    for file, oid in paths.items():
        if oid != id:
            f.write("%s %s\n" % (file, oid))
    f.close()


def touch(file):
    open(file, "w").close()

def write_dict(loc, conf):
    lines = []
    for var, val in conf.items():
        lines.append("%s = \"%s\"" % (var, val.replace("\"", "\\\"")))
    lines.append("")

    f = open(loc, "w")
    f.write(os.linesep.join(lines))
    f.close()

def blog_init(title = "Untitled Weblog", authors = "", url="", feed=""):
    loc = blog_location()
    if path.exists(loc):
        print "Blog already exists"
        return 0

    try:
        common.debug("Creating %s" % loc)
        os.mkdir(loc)
    except:
        common.error("Couldn't create directory %s" % loc)

    for x in ["objects", "meta", "hooks"]:
        common.debug("Creating %s" % path.join(loc, x))
        os.mkdir(path.join(loc, x))

    conf = conf_location(loc)
    write_dict(conf, {"title": title, "authors": authors,
                      "url": url, "feed": feed})
    touch(get_index_location(loc))

    for x in ["add-hook", "remove-hook", "publish-hook"]:
        for y in ["post", "pre"]:
            common.debug("Touching %s/hooks/%s-%s" % (loc, y, x))
            touch(path.join(loc, "hooks", "%s-%s" % (y,x)))
    common.info("New blog succesfully created")

def add_file_to_blog(file, blogloc=".blog", title="", authors="", url=""):
    if not path.isfile(file):
        common.error("File %s doesn't exist or is not a file." % file)

    ret = execute_hook(blogloc, "pre-add-hook")
    if ret is not None and ret != 0:
        common.info("pre-add-hook blocked this file")
        return -1


    id = new_object_id(blogloc)

    file = os.path.realpath(file)

    objd, filed = get_index(blogloc)
    if filed.has_key(file):
        common.warning("File %s already in weblog" % file)
        return -1


    if not file.startswith(blogloc[:-5]):
        common.error("File %s does not live in the blog directory")
    if file.startswith(blogloc):
        common.error("Can't add files in .blog to the weblog")

    dest = file[len(blogloc) - 5:]
    os.symlink(path.join("..", "..", dest), path.join(blogloc, "objects", str(id)))

    f = open(get_index_location(blogloc), "a")
    f.write("%s %d\n" % (file, id))
    f.close()

    meta = path.join(blogloc, "meta", str(id))
    write_dict(meta, {"title": path.basename(file.replace("-", " ").replace("_", " ").replace(".", " ")),
                      "pubdate": "", "author": ""})
    return id

def get_config(location):
    if not path.isfile(location):
        common.error("Configuration file '%s' does not exist" % location)
    f = open(location, "r")
    con = f.read()
    f.close()

    config = {}

    r = re.compile("\ *([a-z]+[a-z0-9]*)\ *=\ *\"(.*)\"", re.IGNORECASE)
    line = 1
    for x in con.splitlines():
        m = r.match(x)
        if m:
            var, val = m.groups()
            config[var] = val
        else:
            common.error("Parse error on line %d" % line)
        line += 1
    return config

def command_line_interface():
    if len(sys.argv) == 1:
        return cli_help()

    args = sys.argv[2:]
    command = sys.argv[1]

    if command in ["-h", "--help"]:
        cli_help()
    elif command in ["add"]:
        cli_add(args)
    elif command in ["config"]:
        cli_config(args)
    elif command in ["help"]:
        pass
    elif command in ["init"]:
        cli_init(args)
    elif command in ["meta"]:
        pass
    elif command in ["publish"]:
        pass
    elif command in ["rm", "remove"]:
        cli_remove(args)
    elif command in ["status"]:
        pass
    else:
        common.error("Unknown command: %s" % command)

def cli_init(args):
    argumentPending = False
    option = ""
    res = {}
    for x in args:
        if not argumentPending:
            if x in ["--title", "--url", "--feed", "--authors"]:
                option = x[2:]
                argumentPending = True
            elif x[0] == "-":
                common.error("Unknown option %s" % x)
            else:
                common.error("Expecting option, got: %s" % x)
        else:
            if option != "":
                res[option] = x
                argumentPending = False
    if argumentPending:
        common.error("Expecting value for %s" % option)
    blog_init(title=res.get("title", "Untitled Weblog"), 
              url=res.get("url", ""),
              feed=res.get("feed", ""),
              authors=res.get("authors", ""))

def cli_add(args):
    if args == []:
        common.error("Expecting files")

    loc = existing_blog_location()
    for x in args:
        id = add_file_to_blog(x, loc)
        if id != -1:
            common.debug("Created object id %d for %s" % (id, x))

def cli_config(args):
    loc = existing_blog_location()
    confloc = conf_location(loc)
    conf = get_config(confloc)

    if args == []:
        return cli_config_list_all(conf)

    com = args[0]

    if com in ["list"]:
        if len(args) == 1:
            return cli_config_list_all(conf)
        else:
            for x in args[1:]:
                print "%s: %s" % (x, pipes.quote(conf.get(x, '')))
    elif com in ["set"]:
        if len(args) >= 3:
            var = args[1]
            val = " ".join(args[2:])
            print "%s: %s" % (var, pipes.quote(val))
            conf[var] = val
            write_dict(confloc, conf)
        else:
            common.error("Expecting variable and value")
    elif com in ["unset"]:
        if len(args) >= 2:
            for x in args[1:]:
                if conf.has_key(x):
                    del conf[x]
                else:
                    common.warning("%s was not set to begin with" % x)
            write_dict(confloc, conf)
        else:
            common.error("Expecting variable")

def cli_config_list_all(conf):
    for var, val in conf.items():
        print "%s: %s" % (var, pipes.quote(val))

def cli_remove(args):
    loc = existing_blog_location()
    if args == []:
        common.error("Expecting objects")
    for x in args:
        remove_object(x, loc)

def cli_help():
    common.cli_module_help(globals())

if __name__ == "__main__":
    command_line_interface()
